// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/order.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/tumbleweedd/two_services_system/order_service/internal/domain/models"
)

// MockOrderCreator is a mock of OrderCreator interface.
type MockOrderCreator struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCreatorMockRecorder
}

// MockOrderCreatorMockRecorder is the mock recorder for MockOrderCreator.
type MockOrderCreatorMockRecorder struct {
	mock *MockOrderCreator
}

// NewMockOrderCreator creates a new mock instance.
func NewMockOrderCreator(ctrl *gomock.Controller) *MockOrderCreator {
	mock := &MockOrderCreator{ctrl: ctrl}
	mock.recorder = &MockOrderCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCreator) EXPECT() *MockOrderCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderCreator) Create(ctx context.Context, order *models.Order) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, order)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderCreatorMockRecorder) Create(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderCreator)(nil).Create), ctx, order)
}

// MockOrderGetter is a mock of OrderGetter interface.
type MockOrderGetter struct {
	ctrl     *gomock.Controller
	recorder *MockOrderGetterMockRecorder
}

// MockOrderGetterMockRecorder is the mock recorder for MockOrderGetter.
type MockOrderGetterMockRecorder struct {
	mock *MockOrderGetter
}

// NewMockOrderGetter creates a new mock instance.
func NewMockOrderGetter(ctrl *gomock.Controller) *MockOrderGetter {
	mock := &MockOrderGetter{ctrl: ctrl}
	mock.recorder = &MockOrderGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderGetter) EXPECT() *MockOrderGetterMockRecorder {
	return m.recorder
}

// Order mocks base method.
func (m *MockOrderGetter) Order(ctx context.Context, orderUUID uuid.UUID) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", ctx, orderUUID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Order indicates an expected call of Order.
func (mr *MockOrderGetterMockRecorder) Order(ctx, orderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockOrderGetter)(nil).Order), ctx, orderUUID)
}

// OrdersByUUIDs mocks base method.
func (m *MockOrderGetter) OrdersByUUIDs(ctx context.Context, UUIDs []uuid.UUID) (map[uuid.UUID]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersByUUIDs", ctx, UUIDs)
	ret0, _ := ret[0].(map[uuid.UUID]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByUUIDs indicates an expected call of OrdersByUUIDs.
func (mr *MockOrderGetterMockRecorder) OrdersByUUIDs(ctx, UUIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByUUIDs", reflect.TypeOf((*MockOrderGetter)(nil).OrdersByUUIDs), ctx, UUIDs)
}

// MockOrderCancaler is a mock of OrderCancaler interface.
type MockOrderCancaler struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCancalerMockRecorder
}

// MockOrderCancalerMockRecorder is the mock recorder for MockOrderCancaler.
type MockOrderCancalerMockRecorder struct {
	mock *MockOrderCancaler
}

// NewMockOrderCancaler creates a new mock instance.
func NewMockOrderCancaler(ctrl *gomock.Controller) *MockOrderCancaler {
	mock := &MockOrderCancaler{ctrl: ctrl}
	mock.recorder = &MockOrderCancalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCancaler) EXPECT() *MockOrderCancalerMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockOrderCancaler) Cancel(ctx context.Context, orderUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, orderUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockOrderCancalerMockRecorder) Cancel(ctx, orderUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockOrderCancaler)(nil).Cancel), ctx, orderUUID)
}
